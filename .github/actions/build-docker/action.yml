# This action expects the code to have been checked out beforehand, e.g. via actions/checkout@v3
# If no version is given, the version is set to the Maven project version.

---
name: Build Docker Image
description: Builds the Zeebe Docker image

inputs:
  repository:
    description: 'The image repository, e.g. camunda/zeebe'
    default: 'camunda/zeebe'
    required: true
  version:
    description: 'The image version, e.g. SNAPSHOT, 8.1.0'
    required: false
  distball:
    description: 'The path to the Zeebe distribution TAR ball'
    required: true
  revision:
    description: 'The revision of the source the content of this image is based on.'
    required: false
  additionalTag:
    description: 'Additional tag to be created, besides the default version tag.'
    required: false
  push:
    description: 'If true, will push the image'
    required: false
    default: 'false'
  platforms:
    # See https://docs.docker.com/build/ci/github-actions/examples/#multi-platform-images
    description: 'Comma separated-list of platforms to build the image for; defaults to linux/amd64'
    required: false
    default: 'linux/amd64'

outputs:
  image:
    description: "Fully qualified image name available in your local Docker daemon"
    value: ${{ steps.get-images.outputs.versionedImage }}
  date:
    description: "The ISO 8601 date at which the image was created"
    value: ${{ steps.get-date.outputs.result }}
  version:
    description: "The semantic version of the packaged artifact"
    value: ${{ steps.get-version.outputs.result }}

runs:
  using: composite
  steps:
    - name: Set up multi-platform support
      uses: docker/setup-qemu-action@v2
    # Creating a context is required when installing buildx on self-hosted runners
    - name: Create context
      shell: bash
      run: |
        docker context create zeebe-context
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        # to be able to push to local registry, which we use in our tests, we need to use host network
        driver-opts: network=host
        endpoint: zeebe-context
        install: true
    - name: Set semantic version from Maven project
      id: get-version
      if: ${{ inputs.version == ''}}
      shell: bash
      run: echo "result=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
    - name: Set image build label from ISO 8601 DATE
      id: get-date
      shell: bash
      run: echo "::set-output name=result::$(date --iso-8601=seconds)"
    - name: Set image names from params and/or project version
      id: get-images
      shell: bash
      run: |
        export VERSION_TAG_IMAGE=${{ inputs.repository }}:${{ inputs.version || steps.get-version.outputs.result }}
        export OPTIONAL_TAG_IMAGE=${{ inputs.additionalTag != '' && format('{0}:{1}', inputs.repository, inputs.additionalTag) || '' }}
        echo "versionedImage=${VERSION_TAG_IMAGE}" >> $GITHUB_OUTPUT
        echo "result=${VERSION_TAG_IMAGE},${OPTIONAL_TAG_IMAGE}" >> $GITHUB_OUTPUT
    - name: Set DISTBALL path relative to the build context
      id: get-distball
      shell: bash
      run: echo "::set-output name=result::$(realpath --relative-to="${PWD}" ${{ inputs.distball }})"
    - name: Build Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        tags: ${{ steps.get-images.outputs.result }}
        load: ${{ inputs.push != 'true' }}
        push: ${{ inputs.push }}
        no-cache: true
        platforms: ${{ inputs.platforms }}
        build-args: |
          DISTBALL=${{ steps.get-distball.outputs.result }}
          DATE=${{ steps.get-date.outputs.result }}
          REVISION=${{ inputs.revision != '' && inputs.revision || github.sha }}
          VERSION=${{ inputs.version != '' && inputs.version || steps.get-version.outputs.result }}
        target: app
