name: QA Testbench run

on:
  workflow_dispatch:
    inputs:
      generation:
        description: 'Specifies the generation template which should be used by the testbench run'
        required: false
        default: 'Zeebe SNAPSHOT'
        type: string
      branch:
        description: 'Specifies the branch, for which the QA Testbench run should be executed'
        default: 'main'
        required: false
        type: string
  workflow_call:
    inputs:
      generation:
        description: 'Specifies the generation template which should be used by the testbench run'
        required: false
        default: 'Zeebe SNAPSHOT'
        type: string
      branch:
        description: 'Specifies the branch, for which the QA Testbench run should be executed'
        default: 'main'
        required: false
        type: string
env:
  BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  GENERATION_TEMPLATE: ${{ inputs.generation }}
  BRANCH_NAME: ${{ inputs.branch }}

jobs:
  qa-testbench:
    name: QA Testbench run
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      IMAGE: "gcr.io/zeebe-io/zeebe"
      GENERATION_TEMPLATE: "${{ inputs.generation }}"
      BRANCH_NAME: "${{ inputs.branch }}"
      ZEEBE_AUTHORIZATION_SERVER_URL: 'https://login.cloud.ultrawombat.com/oauth/token'
      ZEEBE_CLIENT_ID: 'S7GNoVCE6J-8L~OdFiI59kWM19P.wvKo'

    steps:
      # Since we have branches like stable/1.0 where we have to replace certain patterns, in order to use the branch name as docker image tag
      - id: set-branch-name
        name: Sanitize branch name
        run: |
          branch=${BRANCH_NAME/\//-}
          branch=${branch//\./-}
          branch=${branch:-main}
          echo "BRANCH=$branch" >> $GITHUB_ENV
      # We need to check out the evaluated branch and setup java (incl. maven), so we can retrieve the current project version
      # The version is necessary, since CC Saas only accepts SemVer for docker image tags (need to start with a version tag)
      - uses: actions/checkout@v3
        with:
          ref: "${{ env.BRANCH_NAME }}"
      - uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
      # Set further environment variables, which are needed for the QA Testbench run
      - id: set-env
        name: Set environment variables
        run: |
          version=$(mvn help:evaluate -q -DforceStdout -D"expression=project.version")
          tag="$version-$BRANCH-${GITHUB_SHA::8}"
          echo "TAG=$tag" >> $GITHUB_ENV
          echo "QA_RUN_VARIABLES={\"zeebeImage\": \"$IMAGE:$tag\", \"generationTemplate\": \"$GENERATION_TEMPLATE\", \"channel\": \"Internal Dev\", \"branch\": \"$BRANCH_NAME\", \"build\": \"$BUILD_URL\", \"businessKey\": \"$BUILD_URL\", \"processId\": \"qa-protocol\"}" >> $GITHUB_ENV
          echo "BUSINESS_KEY=$BUILD_URL" >> $GITHUB_ENV
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe ZEEBE_GCR_SERVICEACCOUNT_JSON;
            secret/data/products/zeebe/ci/zeebe TESTBENCH_PROD_CLIENT_SECRET;
            secret/data/products/zeebe/ci/zeebe TESTBENCH_PROD_CONTACT_POINT;
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ steps.secrets.outputs.ZEEBE_GCR_SERVICEACCOUNT_JSON }}
      - uses: ./.github/actions/setup-zeebe
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      - uses: ./.github/actions/build-docker
        with:
          repository: ${{ env.IMAGE }}
          version: ${{ env.TAG }}
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
        # Executes the Testbench QA run and awaits the result
      - name: Run Testbench QA
        run: .ci/scripts/distribution/qa-testbench.sh
        env:
          ZEEBE_CLIENT_SECRET: ${{ steps.secrets.outputs.TESTBENCH_PROD_CLIENT_SECRET }}
          ZEEBE_ADDRESS: ${{ steps.secrets.outputs.TESTBENCH_PROD_CONTACT_POINT }}

  notify:
    name: Send slack notification
    runs-on: ubuntu-latest
    needs: [qa-testbench]
    if: ${{ always() }}
    steps:
      - id: slack-failure-notify
        name: Send failure slack notification
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ always() && needs.qa-testbench.result != 'success' }}
        with:
          payload: |
            {
              "text": ":alarm: QA run on `${{ env.BRANCH_NAME }}` with generation template `${{ env.GENERATION_TEMPLATE }}` failed! :alarm:\n ${{ env.BUILD_URL }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: QA run on `${{ env.BRANCH_NAME }}` with generation template `${{ env.GENERATION_TEMPLATE }}` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check: ${{ env.BUILD_URL }}\n \\cc @zeebe-medic"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - id: slack-success-notify
        name: Send success slack notification
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ always() && needs.qa-testbench.result == 'success' }}
        with:
          payload: |
            {
              "text": ":tada: QA run succeeded on `${{ env.BRANCH_NAME }}` with generation template `${{ env.GENERATION_TEMPLATE }}`! :tada:\n ${{ env.BUILD_URL }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada: QA run succeeded on `${{ env.BRANCH_NAME }}` with generation template `${{ env.GENERATION_TEMPLATE }}`! :tada:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Nothing to check today. Good job! :clap:\n"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
